{"version":3,"sources":["PostForm/PostForm.js","App.js","serviceWorker.js","index.js"],"names":["PostForm","props","headers","useState","body","formValue","setForm","responseData","responseValue","setResponse","host","window","location","console","log","onSubmit","e","preventDefault","axios","post","then","response","data","catch","err","errorText","request","onReset","style","fontFamily","name","border","height","width","value","onChange","event","target","onFocus","className","type","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0SAkGeA,G,MA9FE,SAACC,GAEd,IAMMC,EAAU,CACZ,8BAA+B,IAC/B,eAAe,oBAVI,EAaKC,mBAAS,CACjCC,KAAO,2BAdY,mBAahBC,EAbgB,KAaNC,EAbM,OAiBeH,mBAAS,CAC3CI,aAAe,wBAlBI,mBAiBdC,EAjBc,KAiBAC,EAjBA,KAyBfC,EAAOC,OAAOC,SAASF,KAC7BG,QAAQC,IAAI,YAAaJ,GA6C3B,OACI,6BACI,0BAAMK,SA7CU,SAAAC,GACpBA,EAAEC,iBACFJ,QAAQC,IAAIT,GACZI,EAAY,CAACF,aAAa,qCAC1BW,IAAMC,KAAK,UAAYT,EAAO,qCAAqCL,EAAU,CACzEH,QAAQA,IAEXkB,MAAK,SAAAC,GACFR,QAAQC,IAAIO,GACZZ,EAAY,CAACF,aAAac,EAASC,UAEtCC,OAAM,SAAAC,GACHX,QAAQC,IAAIU,GACZ,IAAIC,EAAY,KAGZA,EAFAD,EAAIH,SAEM,4CACDG,EAAIE,QAEH,oCAGA,uCAEdjB,EAAY,CAACF,aAAakB,QAqBKE,QAjBhB,SAAAX,GACnBA,EAAEC,iBACFJ,QAAQC,IAAI,YACZL,EAAY,CAACF,aAAa,wBAC1BD,EAAQ,CAACF,KAAO,6BAcR,6BACI,2BAAOwB,MAAO,CAACC,WAAW,eAA1B,cAA4D,6BAC5D,8BAAUC,KAAO,OAAOF,MA1ErB,CACfG,OAAQ,iBACRC,OAAO,QACPC,MAAM,SAuEmDC,MAAO7B,EAAUD,KAC9D+B,SAzDQ,SAACC,GAErB9B,EAAQ,eAAE8B,EAAMC,OAAOP,KAAQM,EAAMC,OAAOH,SAuDPI,QAdb,SAAAtB,GACxBA,EAAEC,iBACoB,2BAAnBZ,EAAUD,MACTE,EAAQ,CAACF,KAAO,QAW8C,6BACtD,6BACI,4BAASmC,UAAU,cAAcC,KAAK,UAAtC,UACA,4BAASD,UAAU,cAAcC,KAAK,SAAtC,WAIR,6BACI,2BAAKhC,EAAcD,mBC5ExBkC,MATf,WAEE,OACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,QCIcG,QACW,cAA7B/B,OAAOC,SAAS+B,UAEe,UAA7BhC,OAAOC,SAAS+B,UAEhBhC,OAAOC,SAAS+B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAgC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.f0bdaa45.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport './PostForm.css';\r\n\r\nconst PostForm = (props) =>{\r\n\r\n    const inputStyle = {\r\n        border: '2px Light blue',\r\n        height:'480px',\r\n        width:'500px'\r\n    };\r\n\r\n    const headers = {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Content-type':'application/json'\r\n      };\r\n\r\n    const [formValue,setForm] = useState({\r\n        body : 'Paste your chat here..'\r\n      });\r\n\r\n      const [responseValue,setResponse] = useState({\r\n        responseData : 'Waiting for input..'\r\n      });\r\n      const changeHandler = (event) =>{\r\n        \r\n        setForm({[event.target.name] : event.target.value});\r\n      };\r\n\r\n      const host = window.location.host;\r\n      console.log('hostname-'+ host);\r\n\r\n      const submitHandler = e =>{\r\n        e.preventDefault();\r\n        console.log(formValue);\r\n        setResponse({responseData:'Waiting for response from server'})\r\n        axios.post('http://' + host + '/summerEntertainment/sheets/update',formValue,{\r\n            headers:headers\r\n        })\r\n        .then(response =>{\r\n            console.log(response);\r\n            setResponse({responseData:response.data})\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            let errorText = null;\r\n            if (err.response) {\r\n                // client received an error response (5xx, 4xx)\r\n                errorText='Server side error, verify with programmer'\r\n              } else if (err.request) {\r\n                // client never received a response, or request never left\r\n                errorText='Network side error, contact admin'\r\n              } else {\r\n                // anything else\r\n                errorText='I cannot do anything. Close the app.'\r\n              }\r\n            setResponse({responseData:errorText});\r\n        })\r\n      };\r\n\r\n      const resetHandler = e =>{\r\n        e.preventDefault();\r\n        console.log('in reset');\r\n        setResponse({responseData:'Waiting for input..'});\r\n        setForm({body : 'Paste your chat here..'})\r\n      };\r\n\r\n      const focusClearHandler = e =>{\r\n        e.preventDefault();\r\n        if(formValue.body === 'Paste your chat here..'){\r\n            setForm({body : ''});\r\n        }\r\n        \r\n      };\r\n\r\n    return(\r\n        <div>\r\n            <form onSubmit={submitHandler} onReset={resetHandler}>\r\n                <div>\r\n                    <label style={{fontFamily:'sans-serif'}} >Chat Text:</label><br></br>\r\n                    <textarea name = \"body\" style = {inputStyle} value={formValue.body} \r\n                    onChange={changeHandler} onFocus={focusClearHandler}/><br></br>\r\n                    <div >\r\n                        <button  className='buttonStyle' type=\"submit\">Submit</button>\r\n                        <button  className='buttonStyle' type=\"reset\">Reset</button>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div>\r\n                    <p >{responseValue.responseData}</p>\r\n                </div>\r\n            </form>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default PostForm;","import React, { useState } from 'react';\nimport './App.css';\nimport PostForm from './PostForm/PostForm'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <PostForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}